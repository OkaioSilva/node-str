Primeiro: crie um arquivo ".js"
    -> dentro do arquivo, coloque o "use strict" para evitar problemas

Segundo: instalação de 3 pacotes
    npm install http express debug
    Importante: ao final, sempre ponha o "--save", ficando assim:
    npm install http express debug --save


Terceiro: criando um servidor web
    1 - importar o http, o debug, e o express
    const http = require('http')
    const debug = require('debug')('nodestr:server') isso é um nome que dou para o debug
    const express = require('express')

    2 - crie a aplicação:
        const app = express()
        const port = 3000; 
        app.set('port', port)
    
    !Cuidado! Atente-se a porta, pois para aplicação local, vai funcionar, mas quando subir a aplicação, nada garante que essa porta não esteja em uso, mas vamos ver isso futuramente 

    3 - criando o servidor
        const server = http.createServer(app);
        const router = express.Router();

    4 - configurando a primeira rota:
        const route = router.get('/', (req, res, next)=>{
            res.status(200).send({
                title: "Node Store API",
                Version: "0.0.1"
            });
        });
        app.use('/', route);

    5 - pedir para o servirdor ficar ouvindo:
        server.listen(port);
        console.log("API rodando na porta " + port);

Quarto:  Criar uma função para fazer a API rodar em ua porta disponível
    1 - função retirada do gerador de código do Express:
            function normalizePort(val){
                const port = parseInt(val, 10)

                if(isNaN(port)){
                    return val;
                }

                if(port >= 0){
                    return port
                }

                return false;
            }

    2 -  aplicar a função na constante da porta 
        const port = normalizePort(process.env.PORT || "3000");

    
    3 - pegar uma função para gerenciar error do servidor
        1 -
                 function onError(error){
                if(error.syscall !== 'listen'){
                     throw error;
                }

                const bind = typeof port == 'string' ? 'Pipe ' + port : 'Port ' + port;

                switch (error.code){
                    case 'EACCES' :
                        console.error( bind + 'requires elevated privileges');
                        process.exit(1);
                        break;
                    case 'EADDRINUSE':
                        console.error(bind + 'is already in use');
                        process.exit(1);
                        break;
                    default:
                        throw error;
                }
            }

        2 - após isso, chamar uma função do servidor
        server.on('error', onError) 
        isso abaixo da função de listen


Quinto: Iniciando o Debug
    1 - crie a função onListening() ou de sua preferência
                function onListening(){
                    const addr = server.address();
                    const bind = typeof addr === 'string' ? 'pipe' + addr :   'pipe' + addr.port;
                    debug('listening on ' + bind)
                }
    
    2- chame essa função abaixo do server.on
        server.on('listening', onListening)

Sexto: separando servidor 
    1 - Dica: não é bom trabalhar com servidor, rotas, api tudo no mesmo arquivo. Sendo assim, melhor que trabalhe com eles de forma separada para uma melhor organização e uma fácil manutenção de código 
        1.1 - crie uma pasta chamada "bin"
        1.2 - crie um arquivo dentro dessa pasta chamado de "server.js" e esse será o nosso servidor 
    Sendo assim, todas as funções de servidor e gerenciamento de erros vão ficar nessa pasta

    2 - crie uma pasta src ou de sua preferencia e crie um arquivo chamado app.js
        2.1 - dentro do app.js, vão ficar todas as aplicações qeu envolvem a aplicação
        (olhar o passo a passo dentro do arquivo)

    3 - feito essa separação, pode excluir o server.js da raiz do projeto, já tendo separado as aplicações, de nada mais servirá
        ! ATENÇÃO ! É o server.js da raiz, não o que está dentro da pasta "bin"
